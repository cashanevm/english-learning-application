// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using english_learning_application.Data;

#nullable disable

namespace english_learning_application.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("ContextSentence", b =>
                {
                    b.Property<int>("ContextsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentencesID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContextsID", "SentencesID");

                    b.HasIndex("SentencesID");

                    b.ToTable("ContextSentence");
                });

            modelBuilder.Entity("ContextTranslatedSentence", b =>
                {
                    b.Property<int>("ContextsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TranslatedSentencesID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContextsID", "TranslatedSentencesID");

                    b.HasIndex("TranslatedSentencesID");

                    b.ToTable("ContextTranslatedSentence");
                });

            modelBuilder.Entity("ContextTranslatedWord", b =>
                {
                    b.Property<int>("ContextsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TranslatedWordsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContextsID", "TranslatedWordsID");

                    b.HasIndex("TranslatedWordsID");

                    b.ToTable("ContextTranslatedWord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TagWord", b =>
                {
                    b.Property<int>("TagsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagsID", "WordsID");

                    b.HasIndex("WordsID");

                    b.ToTable("TagWord");
                });

            modelBuilder.Entity("TestWord", b =>
                {
                    b.Property<int>("TestsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TestsID", "WordsID");

                    b.HasIndex("WordsID");

                    b.ToTable("TestWord");
                });

            modelBuilder.Entity("english_learning_application.Models.Context", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Contexts");
                });

            modelBuilder.Entity("english_learning_application.Models.DisplaySentence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Display")
                        .IsUnique();

                    b.HasIndex("SentenceId");

                    b.ToTable("DisplaySentences");
                });

            modelBuilder.Entity("english_learning_application.Models.DisplayWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Display")
                        .IsUnique();

                    b.HasIndex("WordId");

                    b.ToTable("DisplayWords");
                });

            modelBuilder.Entity("english_learning_application.Models.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("english_learning_application.Models.Sentence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalSentence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OriginalSentence")
                        .IsUnique();

                    b.HasIndex("WordId");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("english_learning_application.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("english_learning_application.Models.Test", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimePerWord")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("LanguageId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("english_learning_application.Models.TranslatedSentence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SentenceId");

                    b.HasIndex("Translation")
                        .IsUnique();

                    b.HasIndex("WordId");

                    b.ToTable("TranslatedSentences");
                });

            modelBuilder.Entity("english_learning_application.Models.TranslatedWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Translation")
                        .IsUnique();

                    b.HasIndex("WordId");

                    b.ToTable("TranslatedWords");
                });

            modelBuilder.Entity("english_learning_application.Models.Word", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalWord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OriginalWord")
                        .IsUnique();

                    b.ToTable("Words");
                });

            modelBuilder.Entity("ContextSentence", b =>
                {
                    b.HasOne("english_learning_application.Models.Context", null)
                        .WithMany()
                        .HasForeignKey("ContextsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Sentence", null)
                        .WithMany()
                        .HasForeignKey("SentencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContextTranslatedSentence", b =>
                {
                    b.HasOne("english_learning_application.Models.Context", null)
                        .WithMany()
                        .HasForeignKey("ContextsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.TranslatedSentence", null)
                        .WithMany()
                        .HasForeignKey("TranslatedSentencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContextTranslatedWord", b =>
                {
                    b.HasOne("english_learning_application.Models.Context", null)
                        .WithMany()
                        .HasForeignKey("ContextsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.TranslatedWord", null)
                        .WithMany()
                        .HasForeignKey("TranslatedWordsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagWord", b =>
                {
                    b.HasOne("english_learning_application.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Word", null)
                        .WithMany()
                        .HasForeignKey("WordsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestWord", b =>
                {
                    b.HasOne("english_learning_application.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Word", null)
                        .WithMany()
                        .HasForeignKey("WordsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("english_learning_application.Models.DisplaySentence", b =>
                {
                    b.HasOne("english_learning_application.Models.Sentence", "Sentence")
                        .WithMany("DisplaySentences")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("english_learning_application.Models.DisplayWord", b =>
                {
                    b.HasOne("english_learning_application.Models.Word", "Word")
                        .WithMany("DisplayWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("english_learning_application.Models.Sentence", b =>
                {
                    b.HasOne("english_learning_application.Models.Word", "Word")
                        .WithMany("Sentences")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("english_learning_application.Models.Test", b =>
                {
                    b.HasOne("english_learning_application.Models.Language", "Language")
                        .WithMany("Tests")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("english_learning_application.Models.TranslatedSentence", b =>
                {
                    b.HasOne("english_learning_application.Models.Language", "Language")
                        .WithMany("TranslatedSentences")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Sentence", "Sentence")
                        .WithMany("TranslatedSentences")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Word", "Word")
                        .WithMany("TranslatedSentences")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Sentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("english_learning_application.Models.TranslatedWord", b =>
                {
                    b.HasOne("english_learning_application.Models.Language", "Language")
                        .WithMany("TranslatedWords")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("english_learning_application.Models.Word", "Word")
                        .WithMany("TranslatedWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("english_learning_application.Models.Language", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("TranslatedSentences");

                    b.Navigation("TranslatedWords");
                });

            modelBuilder.Entity("english_learning_application.Models.Sentence", b =>
                {
                    b.Navigation("DisplaySentences");

                    b.Navigation("TranslatedSentences");
                });

            modelBuilder.Entity("english_learning_application.Models.Word", b =>
                {
                    b.Navigation("DisplayWords");

                    b.Navigation("Sentences");

                    b.Navigation("TranslatedSentences");

                    b.Navigation("TranslatedWords");
                });
#pragma warning restore 612, 618
        }
    }
}
